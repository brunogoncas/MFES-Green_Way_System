class Device
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	private id : seq of char;
	private car : seq of char;
	private plate : seq of char;
	private owner : Client;
	private historic : seq of Route;
	
	
operations
	public Device: seq of char * seq of char * seq of char * Client ==> Device
	Device(dId, dCar, dPlate, dClient) == (id := dId; car := dCar; plate := dPlate; owner := dClient; return self)
	post id = dId and car = dCar and plate = dPlate and owner = dClient;

	
	public addToHistoric : Route  ==> ()
		addToHistoric(dRoute) == historic := [dRoute] ^ historic 
		post historic = [dRoute] ^ historic~;
	
	
	public GetId: () ==> seq of char
		GetId() == return id;
			
	public GetCar: () ==> seq of char
		GetCar() == return car;
			
	public GetPlate: () ==> seq of char
		GetPlate() == return plate;
		
	public GetOwner: () ==> Client
		GetOwner() == return owner;
		
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Device